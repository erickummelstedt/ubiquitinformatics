Features; 
1. Build, test and connect the following aspects
    DONE a. iterating through ubiquitin
    DONE b. simulation of ubiquitin synthesis 
    DONE c. generate database
    DONE d. figure out K48 elongation/branching 
    DONE e. build the histag with a DHHHHHH at the moment its only HHHHHH in the JSON
    DONE f. run simulation for tetramers and pentamers (each individually saved) 
    DONE g. Create table of unprotected multimers; need to complete
    DONE h. Filtering system for max_abocs; semi completed; build tests
    DONE i. global deprotect at the end of the the files (maybe in FASTAPI)
    DONE h. number of smacs*
    DONE i. each reaction path, circular nature of testing
            DONE # Original tables only built to pentamer
            DONE # use checking pentamers and tetramers as a test for the full code base -- DONE
            DONE # Rebuild the tables 
            DONE # Then download off these..
            DONE # build this all by the end of the day
    DONE - Save reaction summaries based on number of SMACS
    DONE - carry out final tests
Input the series of ubiquitin numbers
DONE - Build reaction map work....
DONE - Combine all the files into 1
DONE - Integrate reaction map work with fast_api
Working in functions_implement_in_fast_api
1.
- DONE Build inventory from the ubiquitins chosen - LONG
- DONE Integrate .xlsx generation with fast_api 
    - DONE Build final cal sheet based on conc. and volume in inventory
    - DONE Enyzme solution has Uba1 + TCEP 
    - DONE Donors has ATP + TCEP 
- DONE Add in mass needed for each enzyme 
- DONE Remove total volume for enzyme and donors
- DONE Add in calculations for uba1
- DONE pmol needed 
- DONE mass needed
- DONE Total volume
- DONE Add in acceptors
- DONE Change Base Reagent to (Enyzme & Donor)
- DONE Mixed Reagent Counts
    - DONE Have everything work off initial column/row
    - DONE Fix Bordering
    - DONE Add in Acceptor Donor Labels
- DONE Base Reagent Counts
    - DONE - Have everything work off initial column/row (some errors)
    - DONE - Fix Bordering
    - DONE Add in Acceptor Donor Labels
- DONE 1. Base Reagent Counts to Base Reagent Prep 
- DONE Fix all indexing issues

- DONE Connect into HTML interface
- DONE 2. Build OT_flex_file from reaction
- DONE Integrate OT_flex_file generation with fast_api 



3. 
- Build Reaction_Sequences list
- Integrate Reaction_Sequences generation with fast_api 
- Integrate Reaction_Sequences with Document generation
- Show the donors and the acceptors

A. Check that opentrons works

4. 
- Build Protocol_Doc
- Integrate Protocol_Doc generation with fast_api 

5. 
- Draw out all the pentamers and tetramers

6. 
- Build the 

# have the inheco plate in there and also the deck layout


submit_selection prompt;
"within fast_api.py Include the download of the excel_bytes = 
create_xlsx_bytes(output_dict) upon submit selection;
have it store within the webpage so it can be downloaded the 
same way the pngs are once save all files is clicked
"

END OF WEEK

- Add in how acceptors are made 

WebApp features;
- Build out functionality first and then make it more user friendly
- Draw out all the pentamers and tetramers
- Save the files; 
    - acceptors
    - donors/enzymes
    - deprots
    - xlsx
    - OT_flex_file
    - Reaction sequences

- Maybe dockerfile everything

Future features; 
- One the first page; explore reaction sequences
- 














Incorporate into 

Web App
- Build input with saving capacities whereby you soemthing you can type the series of ubi5-x 
and you get your 
- VERY IMPORTANT; SHOW ALL PENTAMERS ON THE PAGE AND CLICK ON THEM TO CHOOSE 
YOUR SYNTHESIS PATHWAY Maybe even a drag and drop so multiple can be adde
- Introduce 

# All in the build file
DONE - Label the multimers Ub4-1 to Ub5-1 (easy)

- Save rather than have this separate, save this in the 
- Label dimers (create dimer library) (more time)
- Have a function that pulls synthetic routes based on the multimer
- Now have a function that pulls out the desired synthetic routes

- Remove the all atom shit


END OF NEXT WEEK - all backend is built
TESTING - 

# build calculations part 

Pull out the values! get the indexes that are needed -- DONE

# Build the FAST-API functions consider whether they should be dynamic 
# remove all atom representations
3. Combine everything in written_form into one table (initial histag, donors and reactions) 
- what do I need in the table? 
- start from dimers
4. Separately have all the JSONS in one table
use the index 
Get to here before labeling the data 

You need to label data; 


label each of the multimers - tetramers & pentamers
create table, incase it runs the simulation oddly elsewhere 

3. Combine (initial histag, donors and reactions) into one table
4. Filter by multimer 

5. highlight mulitmers for used reaction scheme (maybe build function for this)
6. from chosen reaction schemes build reaction database and connect to inventory




    1. To the data table add a column for a global deprotect at the end - save this table as the 
    2. Implement FAST-API to select the multimer schemes you would like to implement from the HTML
    - each multimer level has it's own reaction schemes are shown based on the whether the final column looks like the multimer
    - function that pulls 



    - Connect the two (add multimer and final route chosen)

    - Create UI aspect that pulls out the numbered choices
    - Connect the calculations

    - Highlight the reaction schemes that were used in the end for each multimer - manually label them for pentamers

    - Show cleanly on the website
    - 2D representation below the skimming bar 

    - Take up to 16 spots, but use 14 only each time for now
    - Highlight the routes that were chosen
    - Change loacation of test data (DATA file) file 
    - Park the stuff regarding mathematically choosing routes
    - recreate the reaction schemes for tetramers and pentamers
    - build the tests for 2D and 3D representation of ubiquitin
    - connect user interface to ubiquitin ecosystem, build out fastAPI system
    - user interface for opening up ubiquitin - use fastAPI template
    - build the histag with a DHHHHHH at the moment its only HHHHHH in 3D simualation

    - build reaction maps and inventory checks 
    - connect to automated python

    - Build in 3D simulation - finalize json_to_mol2.py with tests and everything.
        a. just 3Dmol.js
        b. build the histag with a DHHHHHH at the moment its only HHHHHH
    
    c. building reaction maps and inventory checks -- by end of april
    d. build 2D representation of ubiquitin
    e. build 3D representation of ubiquitin
    f. featurise gui to sift through reaction schemes in 2D and 3D