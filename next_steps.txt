Features; 
1. Build, test and connect the following aspects
    DONE a. iterating through ubiquitin
    DONE b. simulation of ubiquitin synthesis 
    DONE c. generate database
    DONE d. figure out K48 elongation/branching 
    DONE e. build the histag with a DHHHHHH at the moment its only HHHHHH in the JSON
    DONE f. run simulation for tetramers and pentamers (each individually saved) 
    DONE g. Create table of unprotected multimers; need to complete
    DONE h. Filtering system for max_abocs; semi completed; build tests
    DONE i. global deprotect at the end of the the files (maybe in FASTAPI)
    DONE h. number of smacs*
    DONE i. each reaction path, circular nature of testing
            DONE # Original tables only built to pentamer
            DONE # use checking pentamers and tetramers as a test for the full code base -- DONE
            DONE # Rebuild the tables 
            DONE # Then download off these..
            DONE # build this all by the end of the day
    DONE - Save reaction summaries based on number of SMACS
    DONE - carry out final tests
Input the series of ubiquitin numbers
DONE - Build reaction map work....
DONE - Combine all the files into 1
DONE - Integrate reaction map work with fast_api
Working in functions_implement_in_fast_api
1.
- DONE Build inventory from the ubiquitins chosen - LONG
- DONE Integrate .xlsx generation with fast_api 
    - DONE Build final cal sheet based on conc. and volume in inventory
    - DONE Enyzme solution has Uba1 + TCEP 
    - DONE Donors has ATP + TCEP 
- DONE Add in mass needed for each enzyme 
- DONE Remove total volume for enzyme and donors
- DONE Add in calculations for uba1
- DONE pmol needed 
- DONE mass needed
- DONE Total volume
- DONE Add in acceptors
- DONE Change Base Reagent to (Enyzme & Donor)
- DONE Mixed Reagent Counts
    - DONE Have everything work off initial column/row
    - DONE Fix Bordering
    - DONE Add in Acceptor Donor Labels
- DONE Base Reagent Counts
    - DONE - Have everything work off initial column/row (some errors)
    - DONE - Fix Bordering
    - DONE Add in Acceptor Donor Labels
- DONE 1. Base Reagent Counts to Base Reagent Prep 
- DONE Fix all indexing issues
- DONE Connect into HTML interface
- DONE 2. Build OT_flex_file from reaction
- DONE Integrate OT_flex_file generation with fast_api 
DONE - Build Reaction_Sequences list
DONE - Build image generation software of the JSON files
DONE - Show the donors and the acceptors
DONE - Build beautiful reaction schemes with the new functionality
DONE UI - go to sequences page and fix 'hello': trimer tetramer etc and 'hello1': UbD1,2,3,4,5
DONE - Integrate Reaction_Sequences generation with fast_api 
DONE - Integrate Reaction_Sequences with Document generation
DONE - Draw out all the pentamers and tetramers; this will be easier now
DONE Incorporate into Web App
DONE - Build input with saving capacities whereby you soemthing you can type the series of ubi5-x 
DONE and you get your 
DONE - VERY IMPORTANT; SHOW ALL PENTAMERS ON THE PAGE AND CLICK ON THEM TO CHOOSE 
DONE YOUR SYNTHESIS PATHWAY Maybe even a drag and drop so multiple can be adde
DONE - Introduce 
DONE # All in the build file
DONE - Label the multimers Ub4-1 to Ub5-1 (easy)
DONE - Save rather than have this separate, save this in the 
DONE - Label dimers (create dimer library) (more time)
DONE - Have a function that pulls synthetic routes based on the multimer
DONE - Now have a function that pulls out the desired synthetic routes
DONE - Remove the all atom shit
DONE END OF NEXT WEEK - all backend is built
DONE TESTING - 
DONE # build calculations part 
DONE Pull out the values! get the indexes that are needed -- DONE
DONE # Build the FAST-API functions consider whether they should be dynamic 
DONE # remove all atom representations
DONE 3. Combine everything in written_form into one table (initial histag, donors and reactions) 
DONE - what do I need in the table? 
DONE - start from dimers
DONE 4. Separately have all the JSONS in one table
DONE use the index 
DONE Get to here before labeling the data 
DONE You need to label data; 
DONE label each of the multimers - tetramers & pentamers
DONE create table, incase it runs the simulation oddly elsewhere 
DONE 3. Combine (initial histag, donors and reactions) into one table
DONE 4. Filter by multimer 
DONE 5. highlight mulitmers for used reaction scheme (maybe build function for this)
DONE 6. from chosen reaction schemes build reaction database and connect to inventory
DONE 1. To the data table add a column for a global deprotect at the end - save this table as the 
DONE 2. Implement FAST-API to select the multimer schemes you would like to implement from the HTML
DONE - each multimer level has it's own reaction schemes are shown based on the whether the final column looks like the multimer
DONE - function that pulls 
DONE - Connect the two (add multimer and final route chosen)
DONE - Create UI aspect that pulls out the numbered choices
DONE - Connect the calculations
DONE - Highlight the reaction schemes that were used in the end for each multimer - manually label them for pentamers
DONE - Show cleanly on the website
DONE - 2D representation below the skimming bar 
DONE - Take up to 16 spots, but use 14 only each time for now
DONE - Highlight the routes that were chosen
DONE - Change loacation of test data (DATA file) file 
DONE - Park the stuff regarding mathematically choosing routes
DONE - recreate the reaction schemes for tetramers and pentamers
DONE - build the tests for 2D and 3D representation of ubiquitin
DONE - connect user interface to ubiquitin ecosystem, build out fastAPI system
DONE - user interface for opening up ubiquitin - use fastAPI template
DONE - build the histag with a DHHHHHH at the moment its only HHHHHH in 3D simualation
DONE - build reaction maps and inventory checks 
DONE - connect to automated python
DONE 1.  Connect the drawing in 'Draw' to the back_end
    - Draw out the multimer with the numbers, maybe use ubiquitin builder without resetting the numbers
    - Take it through iterate_through_ubiquitin, to give it correct numbering
DONE 2.  Connect all the images that are frozen to the respective Ub4_X and Ub5_X, use FrozenGameScaffoldPanelTest



Big things;

- Congratulate yourself on finding this...
- Dont over react 
- MASSIVE MASSIVE change is the c-terminus to n-terminus K63 first then K48.
    - to represent biological existence 
    - change the code base so it is all correct
    DONE - change is big in the user interface
    DONE     - fetch isnt working correctly
    DONE     - so ScaffoldJsonWrapper works great, the fetch works as well
    DONE - big for determining the E2 enzyme used
    DONE - Need to revert the Ub4_15 numbers, but maybe not... because they are based on synthesis number.. which is based on synthesis...
- Branch to fix this..

'his-GG-1ubq-1-(<K48_1ubq-2-(<K63_ABOC><K48_SMAC>)>)'
'his-GG-1ubq-1-(<K48_1ubq-2-(<K63_SMAC><K48_ABOC>)>)' 
'his-GG-1ubq-1-(<K48_1ubq-2-(<K63_ABOC><K48_ABOC>)>)' 
'his-GG-1ubq-1-(<K63_ABOC><K48_1ubq-2-(<K48_SMAC>)>)' 
'his-GG-1ubq-1-(<K63_ABOC><K48_1ubq-2-(<K63_ABOC><K48_SMAC>)>)'
'his-GG-1ubq-1-(<K63_ABOC><K48_1ubq-2-(<K63_SMAC><K48_ABOC>)>)'
'his-GG-1ubq-1-(<K63_1ubq-2-(<K63_ABOC><K48_SMAC>)>)' 
'his-GG-1ubq-1-(<K63_1ubq-2-(<K63_SMAC><K48_ABOC>)>)' 
'his-GG-1ubq-1-(<K63_1ubq-2-(<K63_ABOC><K48_ABOC>)>)' 
'his-GG-1ubq-1-(<K63_1ubq-2-(<K63_SMAC>)><K48_ABOC>)' 
'his-GG-1ubq-1-(<K63_1ubq-2-(<K63_ABOC><K48_SMAC>)><K48_ABOC>)' 
'his-GG-1ubq-1-(<K63_1ubq-2-(<K63_SMAC><K48_ABOC>)><K48_ABOC>)' 


- Build website for ubiquitin topology with all linkages 

3.  BIG BIG - Fix validation against confirmation data

4.  Perhaps do the thing that Jeff wanted.... that silly scheme




Tinkerings; 

- 'How to make acceptors' should also be included as a file
- Build Protocol_Doc with fast_api
- To make the inheco plate in there
- Change the colorings 
- Saving the reaction pathways



- Maybe dockerfile everything

- Build in 3D simulation - finalize json_to_mol2.py with tests and everything.
    a. just 3Dmol.js
e. build 3D representation of ubiquitin
f. featurise gui to sift through reaction schemes in 2D and 3D